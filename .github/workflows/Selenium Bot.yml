name: Tor Selenium Bot
on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL to visit (optional - will use urls_config.json)'
        required: false
        default: ''
        type: string
  schedule:
    # Run every 5 hours (at 00:00, 05:00, 10:00, 15:00, 20:00 UTC)
    - cron: '0 */5 * * *'

jobs:
  run-bot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        echo "📦 Updating package lists..."
        sudo apt-get update -qq
        
        echo "🔧 Installing system dependencies..."
        # Install required packages with minimal interaction
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          tor \
          xvfb \
          wget \
          curl \
          netcat-openbsd \
          iproute2 \
          psmisc \
          procps
        
        echo "🦊 Installing Firefox..."
        # Install Firefox using snap (more reliable in GitHub Actions)
        sudo snap install firefox
        
        echo "🔧 Installing geckodriver..."
        # Download and install geckodriver
        GECKODRIVER_VERSION=0.34.0
        wget -q --timeout=30 https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        tar -xzf geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        rm geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        
        # Create Firefox symlink for better compatibility
        sudo ln -sf /snap/bin/firefox /usr/local/bin/firefox
        
        echo "✅ Verifying installations..."
        firefox --version || echo "⚠️ Firefox version check failed"
        geckodriver --version || echo "⚠️ Geckodriver version check failed"  
        tor --version || echo "⚠️ Tor version check failed"
        echo "📦 System dependencies installation completed"
    
    - name: Configure and start Tor
      timeout-minutes: 5
      run: |
        set -e  # Exit on any error
        
        echo "🧹 Cleaning up any existing Tor processes..."
        # More aggressive cleanup
        sudo pkill -9 -f tor 2>/dev/null || true
        sudo systemctl stop tor 2>/dev/null || true
        sudo systemctl disable tor 2>/dev/null || true
        
        # Kill anything using port 9050
        sudo lsof -ti:9050 | xargs -r sudo kill -9 2>/dev/null || true
        sleep 2
        
        echo "⚙️ Configuring Tor with minimal settings..."
        # Create ultra-minimal torrc
        cat > /tmp/torrc <<'EOF'
SocksPort 9050
DataDirectory /tmp/tor_data
RunAsDaemon 0
EOF
        
        # Create data directory
        rm -rf /tmp/tor_data 2>/dev/null || true
        mkdir -p /tmp/tor_data
        chmod 700 /tmp/tor_data
        
        echo "🌐 Starting Tor with timeout protection..."
        # Start Tor with strict timeout and background it immediately
        (timeout 60 tor -f /tmp/torrc --quiet > /tmp/tor.log 2>&1 &)
        sleep 1
        
        # Get the actual Tor PID
        TOR_PID=$(pgrep -f "tor -f /tmp/torrc" || echo "")
        if [ -n "$TOR_PID" ]; then
          echo "TOR_PID=$TOR_PID" >> $GITHUB_ENV
          echo "✅ Tor started with PID: $TOR_PID"
        else
          echo "❌ Failed to get Tor PID"
        fi
        
        echo "⏳ Waiting for Tor to bind to port 9050..."
        # Quick check loop with shorter timeout
        for i in {1..10}; do
          if sudo lsof -i:9050 >/dev/null 2>&1; then
            echo "✅ Tor is listening on port 9050 (attempt $i)"
            break
          fi
          if [ $i -eq 10 ]; then
            echo "❌ Tor failed to bind to port 9050"
            echo "📄 Tor log:"
            cat /tmp/tor.log 2>/dev/null || echo "No log available"
            echo "📊 Process check:"
            pgrep -f tor || echo "No tor processes"
            exit 1
          fi
          sleep 2
        done
        
        echo "🎉 Tor startup completed successfully"
    
    - name: Alternative Tor setup (if main setup fails)
      if: failure()
      timeout-minutes: 3
      run: |
        echo "🔄 Attempting alternative Tor setup..."
        
        # Try using system Tor service instead
        echo "📦 Trying system Tor service..."
        sudo systemctl start tor || true
        sleep 5
        
        # Check if it's running
        if sudo systemctl is-active tor >/dev/null 2>&1; then
          echo "✅ System Tor service is active"
          
          # Check if port is available
          if sudo lsof -i:9050 >/dev/null 2>&1; then
            echo "✅ Tor is listening on port 9050"
            echo "TOR_SYSTEM_SERVICE=true" >> $GITHUB_ENV
          else
            echo "❌ Tor service running but not listening on port 9050"
            exit 1
          fi
        else
          echo "❌ Alternative Tor setup also failed"
          exit 1
        fi
      run: |
        echo "📦 Installing Python dependencies..."
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Python dependencies installed"
    
    - name: Verify Tor connectivity
      run: |
        echo "🔍 Testing Tor connectivity..."
        
        # Wait a bit more for Tor to be fully ready
        sleep 10
        
        # Test with timeout and better error handling
        echo "📡 Testing with curl..."
        if timeout 45 curl --socks5-hostname 127.0.0.1:9050 -s --max-time 30 "https://httpbin.org/ip" > /tmp/curl_test.json 2>/dev/null; then
          echo "✅ Basic connectivity through Tor successful"
          echo "📄 Response:"
          cat /tmp/curl_test.json
        else
          echo "⚠️ Basic curl test failed, trying Tor Project check..."
        fi
        
        # Try Tor Project's check service
        echo "🌐 Testing Tor Project connectivity..."
        if timeout 45 curl --socks5-hostname 127.0.0.1:9050 -s --max-time 30 "https://check.torproject.org/api/ip" > /tmp/tor_check.json 2>/dev/null; then
          echo "✅ Tor Project check successful"
          echo "📄 Response:"
          cat /tmp/tor_check.json
          
          if cat /tmp/tor_check.json | grep -q "IsTor.*true"; then
            echo "🎉 Confirmed: Traffic is going through Tor!"
          else
            echo "⚠️ Warning: Traffic may not be going through Tor"
          fi
        else
          echo "⚠️ Tor Project check failed, but continuing..."
          echo "🔍 Checking if Tor is still running..."
          ps aux | grep tor | grep -v grep || echo "No Tor processes found"
          ss -tuln | grep 9050 || echo "Port 9050 not listening"
        fi
    
    - name: Create logs directory
      run: |
        mkdir -p logs
        echo "📁 Logs directory created"
    
    - name: Run bot with virtual display
      run: |
        # Start virtual display for headless browser
        echo "🖥️ Starting virtual display..."
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        XVFB_PID=$!
        echo "XVFB_PID=$XVFB_PID" >> $GITHUB_ENV
        
        # Wait for display to be ready
        sleep 5
        
        # Set environment variables
        export TOR_ALREADY_RUNNING=true
        export TOR_SOCKS_PORT=9050
        export TOR_CONTROL_PORT=9051
        
        echo "🤖 Starting Tor Selenium Bot..."
        
        # Run the bot with timeout to prevent hanging
        timeout 3600 python tor_selenium_bot.py || {
          echo "⚠️ Bot execution completed or timed out after 1 hour"
          exit 0
        }
    
    - name: Display bot statistics
      if: always()
      run: |
        echo "📊 Bot execution completed"
        echo "📁 Log files created:"
        ls -la logs/ 2>/dev/null || echo "No log files found"
        
        # Show last few lines of latest log file if it exists
        if [ -f logs/*.log ]; then
          echo "📄 Last 20 lines of latest log:"
          tail -20 logs/*.log | head -20
        fi
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bot-logs-${{ github.run_number }}
        path: logs/
        retention-days: 7
        if-no-files-found: warn
    
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up processes..."
        
        # Stop Xvfb if running
        if [ ! -z "$XVFB_PID" ]; then
          kill $XVFB_PID 2>/dev/null || true
          echo "🖥️ Virtual display stopped"
        fi
        
        # Stop Tor if we started it
        if [ ! -z "$TOR_PID" ]; then
          kill $TOR_PID 2>/dev/null || true
          echo "🌐 Tor process stopped"
        fi
        
        # Kill any remaining processes
        sudo pkill -f tor 2>/dev/null || true
        sudo pkill -f firefox 2>/dev/null || true
        sudo pkill -f geckodriver 2>/dev/null || true
        
        echo "✅ Cleanup completed"
