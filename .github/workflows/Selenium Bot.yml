name: Tor Selenium Bot
on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL to visit (optional - will use urls_config.json)'
        required: false
        default: ''
        type: string
  schedule:
    # Run every 5 hours (at 00:00, 05:00, 10:00, 15:00, 20:00 UTC)
    - cron: '0 */5 * * *'

jobs:
  run-bot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tor firefox-esr xvfb
        
        # Download and install geckodriver
        GECKODRIVER_VERSION=0.34.0
        wget https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        tar -xzf geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        rm geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        
        # Verify installations
        firefox --version || firefox-esr --version
        geckodriver --version
        tor --version
    
    - name: Install Python dependencies
      run: |
        pip install selenium requests stem
    
    - name: Configure Tor
      run: |
        # Stop any existing tor service
        sudo systemctl stop tor || true
        
        # Create tor data directory
        sudo mkdir -p /var/lib/tor
        sudo chown -R debian-tor:debian-tor /var/lib/tor
        sudo chmod 700 /var/lib/tor
        
        # Create custom tor configuration
        sudo tee /etc/tor/torrc > /dev/null <<EOF
        SocksPort 9050
        ControlPort 9051
        DataDirectory /var/lib/tor
        CookieAuthentication 1
        CookieAuthFileGroupReadable 1
        Log notice stdout
        EOF
        
        # Set proper permissions
        sudo chmod 644 /etc/tor/torrc
    
    - name: Start Tor service
      run: |
        # Start tor in background
        sudo -u debian-tor tor -f /etc/tor/torrc &
        TOR_PID=$!
        echo "TOR_PID=$TOR_PID" >> $GITHUB_ENV
        
        # Wait for tor to start
        echo "Waiting for Tor to start..."
        sleep 15
        
        # Check if tor is listening on the expected ports
        if netstat -tuln | grep -q ":9050"; then
            echo "✅ Tor SOCKS proxy is running on port 9050"
        else
            echo "❌ Tor SOCKS proxy is not running on port 9050"
            sudo pkill -f tor || true
            exit 1
        fi
        
        if netstat -tuln | grep -q ":9051"; then
            echo "✅ Tor control port is running on port 9051"
        else
            echo "⚠️ Tor control port is not running on port 9051 (may be OK)"
        fi
        
        # Test tor connectivity
        echo "Testing Tor connectivity..."
        curl --socks5-hostname 127.0.0.1:9050 -s "https://check.torproject.org/api/ip" | head -20 || echo "Tor connectivity test failed, but continuing..."
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Run bot with virtual display
      run: |
        # Start virtual display for headless browser
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        XVFB_PID=$!
        echo "XVFB_PID=$XVFB_PID" >> $GITHUB_ENV
        
        sleep 5
        
        # Run the bot
        python tor_selenium_bot.py
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bot-logs
        path: logs/
        retention-days: 7
    
    - name: Cleanup
      if: always()
      run: |
        # Stop Xvfb if running
        if [ ! -z "$XVFB_PID" ]; then
          kill $XVFB_PID || true
        fi
        
        # Stop Tor if running
        if [ ! -z "$TOR_PID" ]; then
          kill $TOR_PID || true
        fi
        sudo pkill -f tor || true
