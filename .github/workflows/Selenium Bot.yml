name: Tor Selenium Bot
on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'URL to visit (optional - will use urls_config.json)'
        required: false
        default: ''
        type: string
  schedule:
    # Run every 5 hours (at 00:00, 05:00, 10:00, 15:00, 20:00 UTC)
    - cron: '0 */5 * * *'

jobs:
  run-bot:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        # Install required packages - use netcat-openbsd instead of netcat
        sudo apt-get install -y tor xvfb wget curl netcat-openbsd net-tools
        
        # Install Firefox using snap (GitHub Actions supports this)
        sudo snap install firefox
        
        # Download and install geckodriver
        GECKODRIVER_VERSION=0.34.0
        wget -q https://github.com/mozilla/geckodriver/releases/download/v${GECKODRIVER_VERSION}/geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        tar -xzf geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        sudo mv geckodriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        rm geckodriver-v${GECKODRIVER_VERSION}-linux64.tar.gz
        
        # Create Firefox symlink for better compatibility
        sudo ln -sf /snap/bin/firefox /usr/local/bin/firefox
        
        # Verify installations
        echo "🔍 Verifying installations..."
        firefox --version
        geckodriver --version
        tor --version
        echo "✅ All dependencies installed successfully"
    
    - name: Configure and start Tor
      run: |
        # Stop any existing tor service
        sudo systemctl stop tor 2>/dev/null || true
        sudo pkill -f tor 2>/dev/null || true
        sleep 2
        
        # Create a custom torrc file
        sudo tee /tmp/torrc > /dev/null <<EOF
        SocksPort 9050
        ControlPort 9051
        CookieAuthentication 0
        DataDirectory /tmp/tor_data
        Log notice stdout
        RunAsDaemon 0
        EOF
        
        # Create data directory with proper permissions
        mkdir -p /tmp/tor_data
        chmod 700 /tmp/tor_data
        
        # Start Tor with custom config in background
        echo "🌐 Starting Tor..."
        nohup tor -f /tmp/torrc > /tmp/tor.log 2>&1 &
        TOR_PID=$!
        echo "TOR_PID=$TOR_PID" >> $GITHUB_ENV
        
        # Wait for Tor to start and check multiple times
        for i in {1..30}; do
          if netstat -tuln | grep -q ":9050"; then
            echo "✅ Tor SOCKS proxy is running on port 9050 (attempt $i)"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Tor SOCKS proxy failed to start after 30 attempts"
            echo "Tor log:"
            cat /tmp/tor.log
            exit 1
          fi
          echo "⏳ Waiting for Tor to start... (attempt $i/30)"
          sleep 2
        done
        
        # Additional verification
        sleep 5
        echo "🔍 Final Tor status check..."
        netstat -tuln | grep 9050 || (echo "❌ Port 9050 not listening" && exit 1)
        echo "✅ Tor is ready"
    
    - name: Install Python dependencies
      run: |
        echo "📦 Installing Python dependencies..."
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "✅ Python dependencies installed"
    
    - name: Verify Tor connectivity
      run: |
        # Test Tor connectivity with multiple methods
        echo "🔍 Testing Tor connectivity..."
        
        # Method 1: Using curl
        if curl --socks5-hostname 127.0.0.1:9050 -s -m 30 "https://check.torproject.org/api/ip" | grep -q "IsTor.*true"; then
            echo "✅ Tor connectivity verified with curl!"
        else
            echo "⚠️ Curl test inconclusive, trying alternative..."
            # Show what we got for debugging
            echo "Curl response:"
            curl --socks5-hostname 127.0.0.1:9050 -s -m 30 "https://check.torproject.org/api/ip" || echo "Curl failed"
        fi
        
        # Method 2: Using Python test script
        echo "🐍 Running Python Tor test..."
        python tor_test.py || echo "⚠️ Python test failed but continuing..."
    
    - name: Create logs directory
      run: |
        mkdir -p logs
        echo "📁 Logs directory created"
    
    - name: Run bot with virtual display
      run: |
        # Start virtual display for headless browser
        echo "🖥️ Starting virtual display..."
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        XVFB_PID=$!
        echo "XVFB_PID=$XVFB_PID" >> $GITHUB_ENV
        
        # Wait for display to be ready
        sleep 5
        
        # Set environment variables
        export TOR_ALREADY_RUNNING=true
        export TOR_SOCKS_PORT=9050
        export TOR_CONTROL_PORT=9051
        
        echo "🤖 Starting Tor Selenium Bot..."
        
        # Run the bot with timeout to prevent hanging
        timeout 3600 python tor_selenium_bot.py || {
          echo "⚠️ Bot execution completed or timed out after 1 hour"
          exit 0
        }
    
    - name: Display bot statistics
      if: always()
      run: |
        echo "📊 Bot execution completed"
        echo "📁 Log files created:"
        ls -la logs/ 2>/dev/null || echo "No log files found"
        
        # Show last few lines of latest log file if it exists
        if [ -f logs/*.log ]; then
          echo "📄 Last 20 lines of latest log:"
          tail -20 logs/*.log | head -20
        fi
    
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bot-logs-${{ github.run_number }}
        path: logs/
        retention-days: 7
        if-no-files-found: warn
    
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up processes..."
        
        # Stop Xvfb if running
        if [ ! -z "$XVFB_PID" ]; then
          kill $XVFB_PID 2>/dev/null || true
          echo "🖥️ Virtual display stopped"
        fi
        
        # Stop Tor if we started it
        if [ ! -z "$TOR_PID" ]; then
          kill $TOR_PID 2>/dev/null || true
          echo "🌐 Tor process stopped"
        fi
        
        # Kill any remaining processes
        sudo pkill -f tor 2>/dev/null || true
        sudo pkill -f firefox 2>/dev/null || true
        sudo pkill -f geckodriver 2>/dev/null || true
        
        echo "✅ Cleanup completed"
